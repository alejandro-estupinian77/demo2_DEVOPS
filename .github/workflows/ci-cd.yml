name: CI/CD Pipeline - Plataforma Educativa

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Job de testing
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: 📦 Instalar dependencias Backend
      run: |
        cd backend
        npm ci

    - name: 🧪 Ejecutar pruebas unitarias
      run: |
        cd backend
        npm run test:unit
      env:
        NODE_ENV: test

    - name: 🔗 Ejecutar pruebas de integración
      run: |
        cd backend
        npm run test:integration
      env:
        NODE_ENV: test

    - name: 📊 Ejecutar pruebas de estrés básicas
      run: |
        cd backend
        npm run test:stress:basic
      env:
        NODE_ENV: test

    - name: 📈 Generar reporte de cobertura
      run: |
        cd backend
        npm run test:unit -- --coverage
      env:
        NODE_ENV: test

    - name: 📤 Subir reporte de cobertura
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Job de seguridad
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🛡️ Security Scan con Snyk
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        path: ./backend

    - name: 🔍 Análisis de código con CodeQL
      uses: github/codeql-action/analyze@v2

  # Job de build y Docker
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏗️ Build y Push Backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/educativa-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/educativa-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build y Push Frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/educativa-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/educativa-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de deployment (solo en main)
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 Deploy to Production
      run: |
        echo "🚀 Desplegando versión ${{ github.sha }} a producción"
        # Aquí irían los comandos de deployment específicos
        # Por ejemplo: kubectl apply, helm upgrade, etc.
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}